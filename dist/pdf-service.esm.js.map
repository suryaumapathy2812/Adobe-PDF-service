{"version":3,"file":"pdf-service.esm.js","sources":["../src/index.ts"],"sourcesContent":["const PDFServicesSdk = require(\"@adobe/pdfservices-node-sdk\");\nimport fs from 'fs';\nimport { Readable } from 'stream';\n// import { Readable } from 'node:stream';\n\nexport default class PdfService {\n\n    credentials() {\n        return PDFServicesSdk.Credentials\n            .serviceAccountCredentialsBuilder()\n            .fromFile('pdfservices-api-credentials.json')\n            .build();\n    }\n\n    /**\n     * Create PDFs from a variety of formats, including static and dynamic HTML; Microsoft Word, PowerPoint, and Excel; as well as text, image, and, Zip\n     * \n     * Supported file types are HTML, DOC, DOCX, PPT, PPTX, XLS, XLSX, TXT, RTF, BMP, JPEG, GIF, TIFF, PNG\n     * \n     * @param  {string} fileName\n     */\n    convertToPdf(fileName: string = \"createPDF\") {\n        try {\n            // Initial setup, create credentials instance.\n            const credentials = this.credentials();\n\n            // Create an ExecutionContext using credentials\n            const executionContext = PDFServicesSdk.ExecutionContext.create(credentials);\n            const createPdfOperation = PDFServicesSdk.CreatePDF.Operation.createNew();\n\n            // Set operation input from a source file.\n            const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/createPDFInput.docx');\n            createPdfOperation.setInput(input);\n\n            // Execute the operation and Save the result to the specified location.\n            createPdfOperation.execute(executionContext)\n                .then((result: any) => result.saveAsFile(`output/${fileName}.pdf`))\n        } catch (err) {\n            console.log(err);\n            throw new Error(\"Failed to Convert into PDF\")\n        }\n    }\n\n\n    /**\n     * This method merge JSON data with Microsoft Office DOCX template file (buffer) \n     * to output a PDF file\n     * \n     * @param  {Buffer} buffer\n     * @param  {JSON} data\n     * @param  {string} fileName\n     */\n    mergeJsonToDocStream(buffer: Buffer, data: JSON, fileName: string) {\n        try {\n\n            // Initial setup, create credentials instance.\n            const credentials = this.credentials();\n\n            // Setup input data for the document merge process\n            const jsonDataForMerge = data;\n\n            // Create an ExecutionContext using credentials\n            const executionContext = PDFServicesSdk.ExecutionContext.create(credentials);\n\n            // Create a new DocumentMerge options instance\n            const documentMerge = PDFServicesSdk.DocumentMerge;\n            const documentMergeOptions = documentMerge.options;\n            const options = new documentMergeOptions\n                .DocumentMergeOptions(jsonDataForMerge, documentMergeOptions.OutputFormat.PDF);\n\n            // Create a new operation instance using the options instance\n            const documentMergeOperation = documentMerge.Operation.createNew(options);\n\n            // Set operation input document template from a source file.\n            const filePath = process.cwd() + \"/output/\" + fileName;\n\n            if (fs.existsSync(filePath)) {\n                console.log(\"File exists.\")\n                fs.unlinkSync(filePath);\n            } else {\n                console.log(\"File does not exist.\")\n            }\n\n            // const input = PDFServicesSdk.FileRef\n            //   .createFromLocalFile('src/templates/templates/ASSAY_Software Services Agreement_SMO.docx');\n            const stream = this.bufferToStream(buffer)\n\n            console.log(\"Buffer to Stream\");\n            console.log(stream);\n\n            const docxReadableStream = stream\n            const input = PDFServicesSdk.FileRef\n                .createFromStream(docxReadableStream, PDFServicesSdk.CreatePDF.SupportedSourceFormat.docx);\n\n            documentMergeOperation.setInput(input);\n\n            // Execute the operation and Save the result to the specified location.\n            documentMergeOperation.execute(executionContext)\n                .then((result: any) => {\n                    result.saveAsFile(`./output/${fileName}.pdf`);\n                })\n                .catch((err: Error) => {\n                    throw new Error(err.message);\n                });\n        } catch (err) {\n            console.log('Exception encountered while executing operation', err);\n            throw new Error(\"Failed to Merge JSON with Document\")\n        }\n    }\n\n\n\n\n    /**\n     * This method converts the incoming file buffer to stream\n     * \n     * @param  {Buffer} binary\n     */\n    public bufferToStream(binary: Buffer) {\n        return new Readable({\n            read() {\n                this.push(binary);\n                this.push(null);\n            }\n        });\n    }\n}"],"names":["PDFServicesSdk","require","PdfService","credentials","Credentials","serviceAccountCredentialsBuilder","fromFile","build","convertToPdf","fileName","executionContext","ExecutionContext","create","createPdfOperation","CreatePDF","Operation","createNew","input","FileRef","createFromLocalFile","setInput","execute","then","result","saveAsFile","err","console","log","Error","mergeJsonToDocStream","buffer","data","jsonDataForMerge","documentMerge","DocumentMerge","documentMergeOptions","options","DocumentMergeOptions","OutputFormat","PDF","documentMergeOperation","filePath","process","cwd","fs","existsSync","unlinkSync","stream","bufferToStream","docxReadableStream","createFromStream","SupportedSourceFormat","docx","message","binary","Readable","read","push"],"mappings":"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"}