{"version":3,"file":"pdf-service.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["const PDFServicesSdk = require(\"@adobe/pdfservices-node-sdk\");\nimport fs from 'fs';\nimport { Readable } from 'stream';\n// import { Readable } from 'node:stream';\n\nexport class PdfService {\n\n  credentials() {\n    return PDFServicesSdk.Credentials\n      .serviceAccountCredentialsBuilder()\n      .fromFile('pdfservices-api-credentials.json')\n      .build();\n  }\n\n  /**\n   * Create PDFs from a variety of formats, including static and dynamic HTML; Microsoft Word, PowerPoint, and Excel; as well as text, image, and, Zip\n   * \n   * Supported file types are HTML, DOC, DOCX, PPT, PPTX, XLS, XLSX, TXT, RTF, BMP, JPEG, GIF, TIFF, PNG\n   * \n   * @param  {string} fileName\n   */\n  convertToPdf(fileName: string = \"createPDF\") {\n    try {\n      // Initial setup, create credentials instance.\n      const credentials = this.credentials();\n\n      // Create an ExecutionContext using credentials\n      const executionContext = PDFServicesSdk.ExecutionContext.create(credentials);\n      const createPdfOperation = PDFServicesSdk.CreatePDF.Operation.createNew();\n\n      // Set operation input from a source file.\n      const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/createPDFInput.docx');\n      createPdfOperation.setInput(input);\n\n      // Execute the operation and Save the result to the specified location.\n      createPdfOperation.execute(executionContext)\n        .then((result: any) => result.saveAsFile(`output/${fileName}.pdf`))\n    } catch (err) {\n      console.log(err);\n      throw new Error(\"Failed to Convert into PDF\")\n    }\n  }\n\n\n  /**\n   * This method merge JSON data with Microsoft Office DOCX template file (buffer) \n   * to output a PDF file\n   * \n   * @param  {Buffer} buffer\n   * @param  {JSON} data\n   * @param  {string} fileName\n   */\n  mergeJsonToDocStream(buffer: Buffer, data: JSON, fileName: string) {\n    try {\n\n      // Initial setup, create credentials instance.\n      const credentials = this.credentials();\n\n      // Setup input data for the document merge process\n      const jsonDataForMerge = data;\n\n      // Create an ExecutionContext using credentials\n      const executionContext = PDFServicesSdk.ExecutionContext.create(credentials);\n\n      // Create a new DocumentMerge options instance\n      const documentMerge = PDFServicesSdk.DocumentMerge;\n      const documentMergeOptions = documentMerge.options;\n      const options = new documentMergeOptions\n        .DocumentMergeOptions(jsonDataForMerge, documentMergeOptions.OutputFormat.PDF);\n\n      // Create a new operation instance using the options instance\n      const documentMergeOperation = documentMerge.Operation.createNew(options);\n\n      // Set operation input document template from a source file.\n      const filePath = process.cwd() + \"/output/\" + fileName;\n\n      if (fs.existsSync(filePath)) {\n        console.log(\"File exists.\")\n        fs.unlinkSync(filePath);\n      } else {\n        console.log(\"File does not exist.\")\n      }\n\n      // const input = PDFServicesSdk.FileRef\n      //   .createFromLocalFile('src/templates/templates/ASSAY_Software Services Agreement_SMO.docx');\n      const stream = this.bufferToStream(buffer)\n\n      console.log(\"Buffer to Stream\");\n      console.log(stream);\n\n      const docxReadableStream = stream\n      const input = PDFServicesSdk.FileRef\n        .createFromStream(docxReadableStream, PDFServicesSdk.CreatePDF.SupportedSourceFormat.docx);\n\n      documentMergeOperation.setInput(input);\n\n      // Execute the operation and Save the result to the specified location.\n      documentMergeOperation.execute(executionContext)\n        .then((result: any) => {\n          result.saveAsFile(`./output/${fileName}.pdf`);\n        })\n        .catch((err: Error) => {\n          throw new Error(err.message);\n        });\n    } catch (err) {\n      console.log('Exception encountered while executing operation', err);\n      throw new Error(\"Failed to Merge JSON with Document\")\n    }\n  }\n\n\n\n\n  /**\n   * This method converts the incoming file buffer to stream\n   * \n   * @param  {Buffer} binary\n   */\n  public bufferToStream(binary: Buffer) {\n    return new Readable({\n      read() {\n        this.push(binary);\n        this.push(null);\n      }\n    });\n  }\n}"],"names":["PDFServicesSdk","require","credentials","Credentials","serviceAccountCredentialsBuilder","fromFile","build","convertToPdf","fileName","this","executionContext","ExecutionContext","create","createPdfOperation","CreatePDF","Operation","createNew","input","FileRef","createFromLocalFile","setInput","execute","then","result","saveAsFile","err","console","log","Error","mergeJsonToDocStream","buffer","data","jsonDataForMerge","documentMerge","DocumentMerge","documentMergeOptions","options","DocumentMergeOptions","OutputFormat","PDF","documentMergeOperation","filePath","process","cwd","fs","existsSync","unlinkSync","stream","bufferToStream","createFromStream","SupportedSourceFormat","docx","message","binary","Readable","read","push"],"mappings":"iKAAMA,EAAiBC,QAAQ,sGAO7BC,YAAA,kBACSF,EAAeG,YACnBC,mCACAC,SAAS,oCACTC,WAULC,aAAA,SAAaC,YAAAA,IAAAA,EAAmB,qBAGtBN,EAAcO,KAAKP,cAGnBQ,EAAmBV,EAAeW,iBAAiBC,OAAOV,GAC1DW,EAAqBb,EAAec,UAAUC,UAAUC,YAGxDC,EAAQjB,EAAekB,QAAQC,oBAAoB,iCACzDN,EAAmBO,SAASH,GAG5BJ,EAAmBQ,QAAQX,GACxBY,MAAK,SAACC,UAAgBA,EAAOC,qBAAqBhB,aACrD,MAAOiB,SACPC,QAAQC,IAAIF,GACN,IAAIG,MAAM,kCAapBC,qBAAA,SAAqBC,EAAgBC,EAAYvB,WAIvCN,EAAcO,KAAKP,cAGnB8B,EAAmBD,EAGnBrB,EAAmBV,EAAeW,iBAAiBC,OAAOV,GAG1D+B,EAAgBjC,EAAekC,cAC/BC,EAAuBF,EAAcG,QACrCA,EAAU,IAAID,EACjBE,qBAAqBL,EAAkBG,EAAqBG,aAAaC,KAGtEC,EAAyBP,EAAclB,UAAUC,UAAUoB,GAG3DK,EAAWC,QAAQC,MAAQ,WAAanC,EAE1CoC,EAAGC,WAAWJ,IAChBf,QAAQC,IAAI,gBACZiB,EAAGE,WAAWL,IAEdf,QAAQC,IAAI,4BAKRoB,EAAStC,KAAKuC,eAAelB,GAEnCJ,QAAQC,IAAI,oBACZD,QAAQC,IAAIoB,OAGN9B,EAAQjB,EAAekB,QAC1B+B,iBAFwBF,EAEa/C,EAAec,UAAUoC,sBAAsBC,MAEvFX,EAAuBpB,SAASH,GAGhCuB,EAAuBnB,QAAQX,GAC5BY,MAAK,SAACC,GACLA,EAAOC,uBAAuBhB,oBAEzB,SAACiB,SACA,IAAIG,MAAMH,EAAI2B,YAExB,MAAO3B,SACPC,QAAQC,IAAI,kDAAmDF,GACzD,IAAIG,MAAM,0CAYboB,eAAA,SAAeK,UACb,IAAIC,WAAS,CAClBC,qBACOC,KAAKH,QACLG,KAAK"}