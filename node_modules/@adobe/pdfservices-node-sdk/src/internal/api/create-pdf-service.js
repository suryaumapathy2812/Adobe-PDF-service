/*
 * Copyright 2019 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 */

const ExtensionMediaTypeMapping = require('../extension-mediatype-mapping'),
	CPFOperationService = require('./cpf-operation-service'),
	cpfConfig = require('../config/cpf-engine-config.js'),
	CPFMessage = require('./../cpf/cpf-message'),
	CpfDocument = require('../cpf/request/platform/cpf-document'),
	CreatePdfOptions = require('../cpf/request/platform/create-pdf-options');

class CreatePDFService extends CPFOperationService {
	constructor() {
		super();
	}

	getCPFMessage(operationMessage) {
		let outputDocument = new CpfDocument('application/pdf','file'),
			inputDocuments = new CpfDocument(operationMessage.sourceFileRefs.input.mediaType,'file0'),
			files = [operationMessage.sourceFileRefs],
			params = {},
			cpfEngineConfig = {};

		switch (operationMessage.sourceFileRefs.input.extension) {
			case ExtensionMediaTypeMapping.zip.extension: {
				if (operationMessage.options) {
					let createPDFOptions = operationMessage.options;
					params = Object.assign({},
						{
							pageLayout: {
								pageWidth: createPDFOptions.pageLayout.pageWidth,
								pageHeight: createPDFOptions.pageLayout.pageHeight
							},
							print: {
								includeHeaderFooter: createPDFOptions.includeHeaderFooter
							},
							json: JSON.stringify(createPDFOptions.dataToMerge)
						});
				}
				cpfEngineConfig = cpfConfig.htmlToPdf;
				break;
			}
			default: {
				params = new CreatePdfOptions(operationMessage.options);
				cpfEngineConfig = cpfConfig.createPdf;
				break;
			}
		}
		return new CPFMessage(inputDocuments, outputDocument, params, files, cpfEngineConfig);
	}

}

module.exports = CreatePDFService;
